#!/bin/bash
set -euo pipefail

# bulk-update - Bulk configuration updates using ConfigHub patterns
#
# Demonstrates ConfigHub's bulk operation capabilities:
# - Update multiple units with filters
# - Apply changes across service groups
# - Manage configuration at scale
#
# Examples:
#   bin/bulk-update replicas backend 3        # Scale all backend services to 3 replicas
#   bin/bulk-update image backend v1.2.3      # Update all backend images to v1.2.3
#   bin/bulk-update env backend KEY=VALUE     # Add env var to all backend services

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

source "$SCRIPT_DIR/../test/lib/common.sh"

# Parse arguments
OPERATION=${1:-help}
LAYER=${2:-}
VALUE=${3:-}
ENV=${4:-dev}

PROJECT=$(bin/proj)
SPACE="${PROJECT}-${ENV}"

usage() {
  cat << EOF
Usage: bin/bulk-update <operation> <layer> <value> [env]

Operations:
  replicas <layer> <count>           Scale all services in layer to count replicas
  memory <layer> <limit>             Set memory limit for all services in layer
  cpu <layer> <limit>                Set CPU limit for all services in layer
  restart <layer>                    Restart all services in layer
  status <layer>                     Show status of all services in layer

Layers:
  data          Data layer (database, reference-data)
  backend       Backend services (account, position, trade-*, people)
  frontend      Frontend (web-gui)
  all           All services

Examples:
  bin/bulk-update replicas backend 3
  bin/bulk-update memory data 512Mi
  bin/bulk-update restart backend
  bin/bulk-update status all

Note: This demonstrates ConfigHub bulk operations.
      For tutorial/simple patterns, see microtraderx.
EOF
  exit 0
}

if [ "$OPERATION" == "help" ] || [ -z "$LAYER" ]; then
  usage
fi

# Verify space exists
if ! cub space list | grep -q "$SPACE"; then
  error "Space $SPACE does not exist"
  exit 1
fi

case "$OPERATION" in
  replicas)
    if [ -z "$VALUE" ]; then
      error "Replica count required"
      usage
    fi

    info "Scaling $LAYER services to $VALUE replicas in $ENV..."

    # Get all deployment units in layer
    UNITS=$(cub unit list --space $SPACE --format json | \
      jq -r ".[] | select(.Labels.layer == \"$LAYER\" and (.Slug | contains(\"deployment\"))) | .Slug")

    if [ -z "$UNITS" ]; then
      error "No deployment units found in layer: $LAYER"
      exit 1
    fi

    # Update each unit (ConfigHub doesn't support bulk patch yet, so loop)
    for unit in $UNITS; do
      info "  Updating $unit..."
      cub unit update $unit --space $SPACE --patch "{\"spec\":{\"replicas\":$VALUE}}" || {
        warn "Failed to update $unit"
        continue
      }

      # Apply the update (CRITICAL: ConfigHub two-state model)
      cub unit apply $unit --space $SPACE || {
        warn "Failed to apply $unit"
        continue
      }
    done

    success "Scaled $LAYER services to $VALUE replicas"
    ;;

  restart)
    info "Restarting $LAYER services in $ENV..."

    # Use kubectl for restart (faster than ConfigHub re-apply)
    kubectl rollout restart deployment -n traderx-$ENV -l layer=$LAYER

    success "Restarted $LAYER services"
    ;;

  status)
    info "Status of $LAYER services in $ENV:"
    echo ""

    if [ "$LAYER" == "all" ]; then
      kubectl get pods -n traderx-$ENV
    else
      kubectl get pods -n traderx-$ENV -l layer=$LAYER
    fi

    echo ""
    info "ConfigHub state:"
    cub unit list --space $SPACE | grep -E "(Slug|$LAYER)" | head -20
    ;;

  memory|cpu)
    if [ -z "$VALUE" ]; then
      error "Resource limit required (e.g., 512Mi or 500m)"
      usage
    fi

    info "Setting $OPERATION limit to $VALUE for $LAYER services..."

    # This would require patch operation - showing the pattern
    warn "ConfigHub bulk resource updates require patch operations"
    info "Pattern would be:"
    echo "  cub unit update --patch --where \"Labels.layer = '$LAYER'\" \\"
    echo "    --patch '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"resources\":{\"limits\":{\"$OPERATION\":\"$VALUE\"}}}]}}}}'"
    ;;

  *)
    error "Unknown operation: $OPERATION"
    usage
    ;;
esac

echo ""
info "ConfigHub features demonstrated:"
echo "  ✓ Bulk operations across multiple units"
echo "  ✓ Filter-based targeting"
echo "  ✓ Update + Apply pattern"
echo "  ✓ Layer-based organization"
