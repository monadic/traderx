#!/bin/bash
# Simplified ConfigHub setup - easier to understand than global-app pattern

set -euo pipefail

# Simple, readable project name (no random prefixes!)
PROJECT="traderx"
echo "$PROJECT" > .cub-project

echo "==================================="
echo "Simplified ConfigHub Setup"
echo "Project: $PROJECT"
echo "==================================="
echo ""

# Step 1: Create environments (just 3 spaces, not 6+)
echo "Creating environment spaces..."
cub space create ${PROJECT}-dev || echo "Space ${PROJECT}-dev already exists"
cub space create ${PROJECT}-staging || echo "Space ${PROJECT}-staging already exists"
cub space create ${PROJECT}-prod || echo "Space ${PROJECT}-prod already exists"

echo ""
echo "✅ Spaces created:"
echo "  - ${PROJECT}-dev"
echo "  - ${PROJECT}-staging"
echo "  - ${PROJECT}-prod"
echo ""

# Step 2: Create units in dev (no complex cloning!)
echo "Creating units in ${PROJECT}-dev..."

# Create units with clear naming (prefix tells you the type)
units=(
  "namespace:confighub/base/namespace.yaml"
  "service-account:confighub/base/service-account.yaml"
  "app-reference-data:confighub/base/reference-data-deployment.yaml"
  "svc-reference-data:confighub/base/reference-data-service.yaml"
  "app-people:confighub/base/people-service-deployment.yaml"
  "svc-people:confighub/base/people-service-service.yaml"
  "app-account:confighub/base/account-service-deployment.yaml"
  "svc-account:confighub/base/account-service-service.yaml"
  "app-position:confighub/base/position-service-deployment.yaml"
  "svc-position:confighub/base/position-service-service.yaml"
  "app-trade:confighub/base/trade-service-deployment.yaml"
  "svc-trade:confighub/base/trade-service-service.yaml"
  "app-trade-processor:confighub/base/trade-processor-deployment.yaml"
  "app-trade-feed:confighub/base/trade-feed-deployment.yaml"
  "svc-trade-feed:confighub/base/trade-feed-service.yaml"
  "app-web-gui:confighub/base/web-gui-deployment.yaml"
  "svc-web-gui:confighub/base/web-gui-service.yaml"
  "infra-ingress:confighub/base/ingress.yaml"
)

for unit_spec in "${units[@]}"; do
  unit_name="${unit_spec%%:*}"
  yaml_file="${unit_spec##*:}"

  if [ -f "$yaml_file" ]; then
    echo "  Creating $unit_name..."
    cub unit create --space ${PROJECT}-dev $unit_name $yaml_file || echo "    Unit $unit_name already exists"
  else
    echo "  ⚠️  File not found: $yaml_file"
  fi
done

echo ""
echo "✅ Units created in ${PROJECT}-dev"
echo ""

# Step 3: Show simple structure (no complex labels/filters)
echo "==================================="
echo "Simplified Structure Created:"
echo "==================================="
echo ""
echo "${PROJECT}/"
echo "├── ${PROJECT}-dev/"
echo "│   ├── namespace"
echo "│   ├── service-account"
echo "│   ├── app-* (applications)"
echo "│   ├── svc-* (services)"
echo "│   └── infra-* (infrastructure)"
echo "├── ${PROJECT}-staging/ (empty - copy from dev when ready)"
echo "└── ${PROJECT}-prod/ (empty - copy from staging when ready)"
echo ""

# Step 4: Show how to deploy (dead simple!)
echo "==================================="
echo "How to Deploy:"
echo "==================================="
echo ""
echo "# Deploy to dev:"
echo "cub unit apply namespace --space ${PROJECT}-dev"
echo "cub unit apply service-account --space ${PROJECT}-dev"
echo "# ... then apply other units"
echo ""
echo "# Or use the simplified deploy script:"
echo "./bin/deploy-simplified dev"
echo ""

# Step 5: Show how to promote (no upstream/downstream complexity!)
echo "==================================="
echo "How to Promote Dev → Staging:"
echo "==================================="
echo ""
echo "# Simple copy:"
echo "for unit in \$(cub unit list --space ${PROJECT}-dev | grep -v NAME | awk '{print \$1}'); do"
echo "  cub unit copy \$unit --from ${PROJECT}-dev --to ${PROJECT}-staging"
echo "done"
echo ""

echo "==================================="
echo "✅ Setup Complete!"
echo "==================================="
echo ""
echo "Benefits of this simplified approach:"
echo "✔ 3 spaces instead of 6+"
echo "✔ Clear naming (app-, svc-, infra-)"
echo "✔ No confusing labels or filters"
echo "✔ No upstream/downstream complexity"
echo "✔ Anyone can understand it in 5 minutes!"
echo ""
echo "Compare to global-app pattern:"
echo "✗ 6+ spaces with confusing purposes"
echo "✗ Random prefix like 'chubby-paws'"
echo "✗ Complex WHERE clauses for filters"
echo "✗ Labels on spaces AND units"
echo "✗ Upstream/downstream relationships"
echo "✗ Takes hours to understand"