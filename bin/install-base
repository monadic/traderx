#!/bin/bash
set -e

# TraderX ConfigHub Installation - Base Structure
# Following canonical patterns from global-app

echo "ðŸš€ Installing TraderX base structure in ConfigHub..."

# Pattern 1: Unique Project Naming
prefix=$(cub space new-prefix)
project="${prefix}-traderx"
echo "ðŸ“¦ Using project prefix: $project"

# Save project name for other scripts
echo "$project" > .cub-project

# Create base space
echo "Creating base space: ${project}-base"
cub space create ${project}-base \
  --label project=$project \
  --label environment=base

# Create filter space
echo "Creating filter space: ${project}-filters"
cub space create ${project}-filters \
  --label project=$project \
  --label type=filters

# Pattern 3: Filter Creation
echo "Creating filters..."

# Service layer filters
cub filter create all Unit \
  --space ${project}-filters \
  --where-field "Space.Labels.project = '$project'"

cub filter create frontend Unit \
  --space ${project}-filters \
  --where-field "Labels.layer = 'frontend'"

cub filter create backend Unit \
  --space ${project}-filters \
  --where-field "Labels.layer = 'backend'"

cub filter create data Unit \
  --space ${project}-filters \
  --where-field "Labels.layer = 'data'"

# Service type filters
cub filter create core-services Unit \
  --space ${project}-filters \
  --where-field "Labels.service IN ('reference-data', 'people-service', 'account-service')"

cub filter create trading-services Unit \
  --space ${project}-filters \
  --where-field "Labels.service IN ('trade-service', 'trade-processor', 'trade-feed')"

# Deployment order filter
cub filter create ordered Unit \
  --space ${project}-filters \
  --where-field "Labels.order IS NOT NULL"

# Create Sets for grouping
echo "Creating sets..."

cub set create critical-services \
  --space ${project}-base \
  --label tier=critical \
  --label monitor=true \
  --description "Core trading services that must not fail"

cub set create data-services \
  --space ${project}-base \
  --label tier=data \
  --label layer=data \
  --description "Data layer services"

# Create units for each service
echo "Creating ConfigHub units..."

# Infrastructure units first
echo "  Creating namespace unit..."
cub unit create namespace \
  --space ${project}-base \
  --type kubernetes/v1/Namespace \
  --data-file confighub/base/namespace.yaml \
  --label type=infra \
  --label order=0

# Service units (in dependency order)
services=(
  "reference-data:1:data:Java/Spring:18085"
  "people-service:2:backend:Java/Spring:18089"
  "account-service:3:backend:Node.js:18091"
  "position-service:4:backend:Java/Spring:18090"
  "trade-service:5:backend:.NET:18092"
  "trade-processor:6:backend:Python:0"
  "trade-feed:7:backend:Java/Spring:18088"
  "web-gui:8:frontend:Angular:18080"
)

for service_info in "${services[@]}"; do
  IFS=':' read -r service order layer tech port <<< "$service_info"

  echo "  Creating $service units..."

  # Create deployment unit
  if [ -f "confighub/base/${service}-deployment.yaml" ]; then
    cub unit create ${service}-deployment \
      --space ${project}-base \
      --type kubernetes/v1/Deployment \
      --data-file confighub/base/${service}-deployment.yaml \
      --label service=$service \
      --label layer=$layer \
      --label tech=$tech \
      --label order=$order \
      --label port=$port
  fi

  # Create service unit (if has port)
  if [ "$port" != "0" ] && [ -f "confighub/base/${service}-service.yaml" ]; then
    cub unit create ${service}-service \
      --space ${project}-base \
      --type kubernetes/v1/Service \
      --data-file confighub/base/${service}-service.yaml \
      --label service=$service \
      --label layer=$layer \
      --label port=$port
  fi
done

# Create ingress
if [ -f "confighub/base/ingress.yaml" ]; then
  echo "  Creating ingress unit..."
  cub unit create ingress \
    --space ${project}-base \
    --type kubernetes/networking.k8s.io/v1/Ingress \
    --data-file confighub/base/ingress.yaml \
    --label type=infra \
    --label order=9
fi

echo "âœ… TraderX base structure installed successfully!"
echo ""
echo "Next steps:"
echo "  1. Run: bin/install-envs    # Create environment hierarchy"
echo "  2. Run: bin/apply-all dev   # Deploy to development"
echo ""
echo "View structure:"
echo "  cub unit tree --node=space --filter ${project}/all --space '*'"