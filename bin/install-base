#!/bin/bash
set -euo pipefail

# TraderX ConfigHub Installation - Base Structure
# Following canonical patterns from global-app

echo "üöÄ Installing TraderX base structure in ConfigHub..."

# Pattern 1: Unique Project Naming
prefix=$(cub space new-prefix)
project="${prefix}-traderx"
echo "üì¶ Using project prefix: $project"

# Save project name for other scripts
echo "$project" > .cub-project

# Create base space (idempotent)
echo "Creating base space: ${project}-base"
cub space create ${project}-base \
  --label project=$project \
  --label environment=base || echo "Space ${project}-base already exists"

# Create filter space (idempotent)
echo "Creating filter space: ${project}-filters"
cub space create ${project}-filters \
  --label project=$project \
  --label type=filters || echo "Space ${project}-filters already exists"

# Pattern 3: Filter Creation
echo "Creating filters..."

# Service layer filters
cub filter create all Unit \
  --space ${project}-filters \
  --where-field "Space.Labels.project = '$project'"

cub filter create frontend Unit \
  --space ${project}-filters \
  --where-field "Labels.layer = 'frontend'"

cub filter create backend Unit \
  --space ${project}-filters \
  --where-field "Labels.layer = 'backend'"

cub filter create data Unit \
  --space ${project}-filters \
  --where-field "Labels.layer = 'data'"

# Service type filters
cub filter create core-services Unit \
  --space ${project}-filters \
  --where-field "Labels.service IN ('reference-data', 'people-service', 'account-service')"

cub filter create trading-services Unit \
  --space ${project}-filters \
  --where-field "Labels.service IN ('trade-service', 'trade-processor', 'trade-feed')"

# Deployment order filter (using IN operator with possible values)
cub filter create ordered Unit \
  --space ${project}-filters \
  --where-field "Labels.order IN ('0','1','2','3','4','5','6','7','8','9')"

# Create Sets for grouping
# NOTE: 'cub set' command not available in current CLI version
# Sets functionality may be available via API or future CLI updates
echo "‚ö†Ô∏è  Skipping sets (not available in current cub CLI version)"

# cub set create critical-services \
#   --space ${project}-base \
#   --label tier=critical \
#   --label monitor=true

# cub set create data-services \
#   --space ${project}-base \
#   --label tier=data \
#   --label layer=data

# Create units for each service
echo "Creating ConfigHub units..."

# Infrastructure units first (namespace MUST be order=0, database order=0)
echo "  Creating namespace unit..."
cub unit create --space ${project}-base \
  --label type=infra \
  --label order=0 \
  namespace \
  confighub/base/namespace.yaml

# Infrastructure units first
echo "  Creating database units..."
if [ -f "confighub/base/database-deployment.yaml" ]; then
  cub unit create --space ${project}-base \
    --label service=database \
    --label layer=data \
    --label order=0 \
    database-deployment \
    confighub/base/database-deployment.yaml
fi

if [ -f "confighub/base/database-service.yaml" ]; then
  cub unit create --space ${project}-base \
    --label service=database \
    --label layer=data \
    database-service \
    confighub/base/database-service.yaml
fi

# Service units (in dependency order - CORRECTED PORTS per FINOS TraderX)
services=(
  "reference-data:1:data:Java/Spring:18085"
  "trade-feed:2:backend:Java/Spring:18086"
  "account-service:3:backend:Node.js:18088"
  "people-service:4:backend:Java/Spring:18089"
  "position-service:5:backend:Java/Spring:18090"
  "trade-processor:6:backend:Python:18091"
  "trade-service:7:backend:.NET:18092"
  "web-gui:8:frontend:Angular:18080"
)

for service_info in "${services[@]}"; do
  IFS=':' read -r service order layer tech port <<< "$service_info"

  echo "  Creating $service units..."

  # Create deployment unit
  if [ -f "confighub/base/${service}-deployment.yaml" ]; then
    cub unit create --space ${project}-base \
      --label service=$service \
      --label layer=$layer \
      --label tech=$tech \
      --label order=$order \
      --label port=$port \
      ${service}-deployment \
      confighub/base/${service}-deployment.yaml
  fi

  # Create service unit (if has port)
  if [ "$port" != "0" ] && [ -f "confighub/base/${service}-service.yaml" ]; then
    cub unit create --space ${project}-base \
      --label service=$service \
      --label layer=$layer \
      --label port=$port \
      ${service}-service \
      confighub/base/${service}-service.yaml
  fi
done

# Create ingress
if [ -f "confighub/base/ingress.yaml" ]; then
  echo "  Creating ingress unit..."
  cub unit create --space ${project}-base \
    --label type=infra \
    --label order=9 \
    ingress \
    confighub/base/ingress.yaml
fi

echo "‚úÖ TraderX base structure installed successfully!"
echo ""
echo "Next steps:"
echo "  1. Run: bin/install-envs    # Create environment hierarchy"
echo "  2. Run: bin/apply-all dev   # Deploy to development"
echo ""
echo "View structure:"
echo "  cub unit tree --node=space --filter ${project}/all --space '*'"