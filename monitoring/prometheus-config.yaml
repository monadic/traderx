apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: {{ .Namespace | default "traderx-monitoring" }}
  labels:
    app: prometheus
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 15s
      external_labels:
        cluster: {{ .Environment | default "dev" }}
        platform: traderx

    # Alertmanager configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093

    # Load rules
    rule_files:
      - '/etc/prometheus/rules/*.yml'

    # Scrape configurations
    scrape_configs:
      # Prometheus self-monitoring
      - job_name: 'prometheus'
        static_configs:
        - targets: ['localhost:9090']

      # Kubernetes API server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)

      # Kubernetes pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - traderx-dev
            - traderx-staging
            - traderx-prod
        relabel_configs:
        # Only scrape pods with prometheus.io/scrape annotation
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        # Use pod name as instance
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: instance
        # Use pod namespace
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        # Use pod service name
        - source_labels: [__meta_kubernetes_pod_label_service]
          action: replace
          target_label: service
        # Use pod layer
        - source_labels: [__meta_kubernetes_pod_label_layer]
          action: replace
          target_label: layer
        # Use pod version
        - source_labels: [__meta_kubernetes_pod_label_version]
          action: replace
          target_label: version
        # Use custom scrape path from annotation
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        # Use custom port from annotation
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__

      # TraderX reference-data (critical service)
      - job_name: 'traderx-reference-data'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - traderx-dev
            - traderx-staging
            - traderx-prod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_service]
          action: keep
          regex: reference-data
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: environment
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: instance
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: '(http_requests_total|http_request_duration_seconds.*|jvm_.*|process_.*)'
          action: keep

      # TraderX trade-service (critical service)
      - job_name: 'traderx-trade-service'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - traderx-dev
            - traderx-staging
            - traderx-prod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_service]
          action: keep
          regex: trade-service
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: environment
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: instance
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: '(http_requests_total|http_request_duration_seconds.*|dotnet_.*|process_.*|trade_.*)'
          action: keep

      # TraderX position-service (critical service)
      - job_name: 'traderx-position-service'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - traderx-dev
            - traderx-staging
            - traderx-prod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_service]
          action: keep
          regex: position-service
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: environment
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: instance
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: '(http_requests_total|http_request_duration_seconds.*|jvm_.*|process_.*|position_.*)'
          action: keep

      # Kubernetes service endpoints
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - traderx-dev
            - traderx-staging
            - traderx-prod
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: {{ .Namespace | default "traderx-monitoring" }}
  labels:
    app: prometheus
    component: monitoring
data:
  traderx-alerts.yml: |
    groups:
    - name: traderx-critical
      interval: 30s
      rules:
      # Critical service availability
      - alert: TradeServiceDown
        expr: up{service="trade-service"} == 0
        for: 30s
        labels:
          severity: critical
          service: trade-service
          team: trading-platform
        annotations:
          summary: "Trade Service is DOWN"
          description: "Trade service {{ $labels.instance }} has been down for more than 30 seconds."
          impact: "CRITICAL: Trading platform is unavailable"
          runbook: "https://wiki.example.com/runbooks/trade-service-down"

      - alert: ReferenceDataDown
        expr: up{service="reference-data"} == 0
        for: 30s
        labels:
          severity: critical
          service: reference-data
          team: trading-platform
        annotations:
          summary: "Reference Data Service is DOWN"
          description: "Reference data service {{ $labels.instance }} has been down for more than 30 seconds."
          impact: "CRITICAL: All services depend on reference data"
          runbook: "https://wiki.example.com/runbooks/reference-data-down"

      - alert: PositionServiceDown
        expr: up{service="position-service"} == 0
        for: 30s
        labels:
          severity: critical
          service: position-service
          team: trading-platform
        annotations:
          summary: "Position Service is DOWN"
          description: "Position service {{ $labels.instance }} has been down for more than 30 seconds."
          impact: "CRITICAL: Position tracking unavailable"
          runbook: "https://wiki.example.com/runbooks/position-service-down"

      # High error rates
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05
        for: 2m
        labels:
          severity: high
          team: trading-platform
        annotations:
          summary: "High Error Rate Detected"
          description: "Service {{ $labels.service }} has error rate > 5% (current: {{ $value | humanizePercentage }})"
          impact: "Service reliability degraded"

      # High latency
      - alert: HighLatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 0.5
        for: 5m
        labels:
          severity: high
          team: trading-platform
        annotations:
          summary: "High Latency Detected"
          description: "Service {{ $labels.service }} p95 latency > 500ms (current: {{ $value }}s)"
          impact: "User experience degraded"

      # Pod restarts
      - alert: FrequentPodRestarts
        expr: rate(kube_pod_container_status_restarts_total[15m]) > 0.1
        for: 5m
        labels:
          severity: high
          team: trading-platform
        annotations:
          summary: "Frequent Pod Restarts"
          description: "Pod {{ $labels.pod }} is restarting frequently ({{ $value }} restarts/min)"
          impact: "Service stability issue"

      # Resource exhaustion
      - alert: HighMemoryUsage
        expr: container_memory_usage_bytes / container_spec_memory_limit_bytes > 0.9
        for: 5m
        labels:
          severity: warning
          team: trading-platform
        annotations:
          summary: "High Memory Usage"
          description: "Container {{ $labels.container }} memory usage > 90% (current: {{ $value | humanizePercentage }})"
          impact: "Risk of OOM kill"

      - alert: HighCPUUsage
        expr: rate(container_cpu_usage_seconds_total[5m]) / container_spec_cpu_quota * 100 > 80
        for: 10m
        labels:
          severity: warning
          team: trading-platform
        annotations:
          summary: "High CPU Usage"
          description: "Container {{ $labels.container }} CPU usage > 80% (current: {{ $value }}%)"
          impact: "Performance degradation"

      # Deployment issues
      - alert: DeploymentReplicasMismatch
        expr: kube_deployment_spec_replicas != kube_deployment_status_replicas_available
        for: 5m
        labels:
          severity: warning
          team: trading-platform
        annotations:
          summary: "Deployment Replicas Mismatch"
          description: "Deployment {{ $labels.deployment }} desired replicas != available replicas"
          impact: "Deployment may be degraded"

    - name: traderx-business-metrics
      interval: 60s
      rules:
      # Business metrics
      - alert: LowTradingVolume
        expr: rate(trades_executed_total[15m]) < 1
        for: 30m
        labels:
          severity: warning
          team: business
        annotations:
          summary: "Low Trading Volume"
          description: "Trading volume has been low for 30 minutes"
          impact: "Business impact - investigate if expected"

      - alert: HighTradeRejectionRate
        expr: rate(trades_rejected_total[5m]) / rate(trades_submitted_total[5m]) > 0.1
        for: 10m
        labels:
          severity: high
          team: trading-platform
        annotations:
          summary: "High Trade Rejection Rate"
          description: "Trade rejection rate > 10%"
          impact: "User experience degraded - investigate root cause"
